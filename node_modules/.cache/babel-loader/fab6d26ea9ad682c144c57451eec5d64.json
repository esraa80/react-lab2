{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\huawei\\\\Downloads\\\\React_TodoList-main (2)\\\\React_TodoList-main\\\\React_TodoList-main\\\\src\\\\components\\\\Todo List FunctionalComponent\\\\TodoListFC.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport TodoForm from \"./TodoForm\";\nimport Todo from './Todo';\nimport './TodoStyle.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TodoList() {\n  _s();\n\n  let [todos, setTodos] = useState([]);\n  const [todoToShow, setTodoToShow] = useState(\"all\");\n  const [toggleAllComplete, setToggleAllComplete] = useState(true);\n\n  const addTodo = todo => {\n    setTodos([todo, ...todos]);\n  };\n\n  const toggleComplete = id => {\n    setTodos(todos.map(todo => {\n      if (todo.id === id) {\n        // suppose to update\n        return { ...todo,\n          complete: !todo.complete\n        };\n      } else {\n        return todo;\n      }\n    }));\n  };\n\n  const handleDeleteTodo = id => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  const removeAllTodosThatAreComplete = () => {\n    setTodos(todos.filter(todo => !todo.complete));\n  };\n\n  const updateTodoToShow = s => {\n    setTodoToShow(s);\n  }; //update todoToShow in state  \n\n\n  if (todoToShow === \"active\") {\n    todos = todos.filter(todo => !todo.complete);\n  } else if (todoToShow === \"complete\") {\n    todos = todos.filter(todo => todo.complete);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(TodoForm, {\n      onSubmit: addTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), todos.map(todo => /*#__PURE__*/_jsxDEV(Todo, {\n      todo: todo,\n      toggleComplete: () => toggleComplete(todo.id),\n      onDelete: () => handleDeleteTodo(todo.id)\n    }, todo.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"update-btn btn \",\n        onClick: () => updateTodoToShow(\"all\"),\n        children: \"all\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"update-btn btn\",\n        onClick: () => updateTodoToShow(\"active\"),\n        children: \"active\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"update-btn btn\",\n        onClick: () => updateTodoToShow(\"complete\"),\n        children: \"complete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 12\n    }, this), todos.some(todo => todo.complete) ? /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"all-btn btn\",\n      onClick: removeAllTodosThatAreComplete,\n      children: \"Remove all complete todos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"all-btn btn\",\n      onClick: () => {\n        setTodos(todos.map(todo => ({ ...todo,\n          complete: toggleAllComplete\n        })));\n        setToggleAllComplete(!toggleAllComplete);\n      },\n      children: [\"Toggle all complete : \", `${toggleAllComplete}`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TodoList, \"tdNN4e/j6/8TnwT30R1eAYY2ZcA=\");\n\n_c = TodoList;\nexport default TodoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"sources":["C:/Users/huawei/Downloads/React_TodoList-main (2)/React_TodoList-main/React_TodoList-main/src/components/Todo List FunctionalComponent/TodoListFC.js"],"names":["React","useState","TodoForm","Todo","TodoList","todos","setTodos","todoToShow","setTodoToShow","toggleAllComplete","setToggleAllComplete","addTodo","todo","toggleComplete","id","map","complete","handleDeleteTodo","filter","removeAllTodosThatAreComplete","updateTodoToShow","s","some"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport TodoForm from \"./TodoForm\";\nimport Todo from './Todo';\nimport './TodoStyle.css';\n\nfunction TodoList(){\n\n    let [todos,setTodos] = useState([]);\n    const [todoToShow,setTodoToShow] = useState(\"all\");\n    const [toggleAllComplete,setToggleAllComplete] = useState(true);\n\n    const  addTodo = todo =>{\n\n        setTodos(\n            [todo,...todos]\n        )\n    }\n    const toggleComplete = id =>{\n        setTodos(todos.map(todo =>{\n            if (todo.id === id){\n                // suppose to update\n                return {\n                    ...todo,\n                    complete : ! todo.complete\n                }\n             }else{\n                 return todo\n             }\n        }))\n    }\n    const handleDeleteTodo = (id) =>{\n        setTodos(\n            todos.filter(todo => todo.id !== id)\n        )\n    }\n\n    const removeAllTodosThatAreComplete = () =>{\n        setTodos(\n            todos.filter(todo => !todo.complete)\n        )\n      \n    }\n    const updateTodoToShow = (s)=>{\n\n       setTodoToShow(\n           s\n       )\n    }\n\n   //update todoToShow in state  \n    if(todoToShow === \"active\"){\n        todos = todos.filter(todo => (!todo.complete));\n        \n    }else if(todoToShow === \"complete\"){\n        todos = todos.filter(todo => (todo.complete));\n    }\n\n    return(\n        \n        <div className=\"container\">\n            <TodoForm onSubmit= {addTodo}/>\n            {todos.map(todo =>(\n                <Todo\n                 key= {todo.id} todo = {todo} \n                 toggleComplete = {() => toggleComplete(todo.id)} \n                 onDelete = {()=> handleDeleteTodo(todo.id)} />\n            ))}\n          \n           <div>\n                <button className='update-btn btn ' onClick={()=> updateTodoToShow(\"all\")}>all</button>\n                <button className='update-btn btn'onClick={()=> updateTodoToShow(\"active\")}>active</button>\n                <button className='update-btn btn'onClick={()=> updateTodoToShow(\"complete\")}>complete</button>\n            </div>\n            {todos.some(todo => todo.complete) ? \n            <button className='all-btn btn' onClick={removeAllTodosThatAreComplete}>Remove all complete todos</button> \n            : null}\n              <button className='all-btn btn' onClick={\n                    ()=>{\n                        setTodos(\n                            todos.map(todo =>({\n                                ...todo,\n                                complete : toggleAllComplete,\n                            }\n                            ))\n                        )\n                        setToggleAllComplete(\n                            !toggleAllComplete\n                        )\n                      \n                    }\n                }>Toggle all complete : {`${toggleAllComplete}`}</button>\n       </div>\n    )\n}\n\nexport default TodoList;"]},"metadata":{},"sourceType":"module"}